package main

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"net/http"
	url2 "net/url"
	"os"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/robfig/cron/v3"
)

// Quote —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ZenQuotes API.
type Quote struct {
	Quote  string `json:"q"` // —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
	Author string `json:"a"` // –∞–≤—Ç–æ—Ä
	HTML   string `json:"h"` // HTML-–≤–µ—Ä—Å–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞.
const (
	botToken = "8160500562:AAFi9TWrsZvltejKjXPI4vpzzXf59MmDwpY" // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
	chatID   = -1002526755108                                   // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞
)

// zenQuoteURL ‚Äì URL, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã.
var zenQuoteURL = "https://zenquotes.io/api/random"

// httpGet ‚Äì —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é http.Get).
var httpGet = http.Get

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ slog
func setupLogger() *slog.Logger {
	logger := slog.New(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{
		Level: slog.LevelInfo,
	}))
	return logger
}

// fetchQuote –¥–µ–ª–∞–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å –∫ API ZenQuotes –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–∏—Ç–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¶–∏—Ç–∞—Ç–∞ ‚Äì –ê–≤—Ç–æ—Ä".
func fetchQuote(logger *slog.Logger) (string, error) {
	resp, err := httpGet(zenQuoteURL)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API", "error", err)
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		logger.Error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP —Å—Ç–∞—Ç—É—Å", "status_code", resp.StatusCode)
		return "", fmt.Errorf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP —Å—Ç–∞—Ç—É—Å: %d", resp.StatusCode)
	}

	var quotes []Quote
	if err := json.NewDecoder(resp.Body).Decode(&quotes); err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON", "error", err)
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %w", err)
	}

	if len(quotes) == 0 {
		logger.Error("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç")
		return "", fmt.Errorf("–ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç")
	}

	result := fmt.Sprintf("%s ‚Äì %s", quotes[0].Quote, quotes[0].Author)
	logger.Info("–¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞", "quote", result)
	return result, nil
}

// translateToRussian –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ —á–µ—Ä–µ–∑ MyMemory API.
func translateToRussian(text string, logger *slog.Logger) (string, error) {
	chunks := splitText(text)
	var translatedChunks []string

	for _, chunk := range chunks {
		translatedChunk, err := translateChunk(chunk, logger)
		if err != nil {
			logger.Error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞", "chunk", chunk, "error", err)
			return "", err
		}
		translatedChunks = append(translatedChunks, translatedChunk)
	}

	translatedText := strings.Join(translatedChunks, " ")
	logger.Info("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω", "original", text, "translated", translatedText)
	return translatedText, nil
}

const maxTextLength = 500

func splitText(text string) []string {
	var chunks []string
	for len(text) > maxTextLength {
		chunks = append(chunks, text[:maxTextLength])
		text = text[maxTextLength:]
	}
	chunks = append(chunks, text)
	return chunks
}

func translateChunk(text string, logger *slog.Logger) (string, error) {
	url := "https://api.mymemory.translated.net/get"
	encodedText := url2.QueryEscape(text)
	params := fmt.Sprintf("?q=%s&langpair=en|ru", encodedText)

	logger.Info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫ MyMemory API", "url", url+params)

	resp, err := http.Get(url + params)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ HTTP-–∑–∞–ø—Ä–æ—Å–∞", "url", url+params, "error", err)
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ HTTP-–∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		logger.Error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP —Å—Ç–∞—Ç—É—Å", "url", url+params, "status_code", resp.StatusCode)
		return "", fmt.Errorf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP —Å—Ç–∞—Ç—É—Å: %d", resp.StatusCode)
	}

	var result struct {
		ResponseData struct {
			TranslatedText string `json:"translatedText"`
		} `json:"responseData"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON", "url", url+params, "error", err)
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %w", err)
	}

	if result.ResponseData.TranslatedText == "" {
		logger.Error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç MyMemory", "url", url+params)
		return "", fmt.Errorf("–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç MyMemory")
	}

	return result.ResponseData.TranslatedText, nil
}

func sendQuote(bot *tgbotapi.BotAPI, chatID int64, logger *slog.Logger) {
	logger.Info("–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç—ã –∑–∞–ø—É—â–µ–Ω–∞")
	quote, err := fetchQuote(logger)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã", "error", err)
		return
	}

	translatedQuote, err := translateToRussian(quote, logger)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ü–∏—Ç–∞—Ç—ã", "error", err)
		translatedQuote = quote // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–∏—Ç–∞—Ç—É
	}

	// –†–∞–∑–¥–µ–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É –Ω–∞ —Ç–µ–∫—Å—Ç –∏ –∞–≤—Ç–æ—Ä–∞
	parts := strings.Split(translatedQuote, " ‚Äì ")
	if len(parts) != 2 {
		logger.Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–∏—Ç–∞—Ç—ã", "quote", translatedQuote)
		return
	}
	quoteText := parts[0]
	quoteAuthor := parts[1]

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
	formattedMessage := fmt.Sprintf(
		"üìñ %s\n\n‚Äî %s ‚úçÔ∏è",
		quoteText,
		quoteAuthor,
	)

	msg := tgbotapi.NewMessage(chatID, formattedMessage)
	if _, err := bot.Send(msg); err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", "error", err)
	} else {
		logger.Info("–¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", "quote", translatedQuote)
	}
}

func main() {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
	logger := setupLogger()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		logger.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞", "error", err)
		os.Exit(1)
	}
	bot.Debug = true
	logger.Info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", "bot_name", bot.Self.UserName)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ Cron
	c := cron.New()
	defer c.Stop()

	// –ó–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç —Ç—Ä–∏ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å (–≤—Ä–µ–º—è –≤ UTC)
	times := []string{"0 3 * * *", "0 9 * * *", "0 15 * * *"} // 6:00, 12:00, 18:00 –ú–°–ö
	for _, cronTime := range times {
		_, err := c.AddFunc(cronTime, func() {
			sendQuote(bot, chatID, logger)
		})
		if err != nil {
			logger.Error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ cron", "error", err)
			os.Exit(1)
		}
	}

	c.Start()
	logger.Info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á.")

	// –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
	go func() {
		time.Sleep(5 * time.Second) // –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥
		logger.Info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
		sendQuote(bot, chatID, logger)
	}()

	select {}
}
